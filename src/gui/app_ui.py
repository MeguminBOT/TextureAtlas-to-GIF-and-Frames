# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'app.ui'
##
## Created by: Qt User Interface Compiler version 6.8.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractSpinBox, QApplication, QCheckBox, QComboBox,
    QDoubleSpinBox, QFrame, QGridLayout, QGroupBox,
    QHBoxLayout, QLabel, QLayout, QLineEdit,
    QListView, QMainWindow, QMenu, QMenuBar,
    QProgressBar, QPushButton, QSizePolicy, QSlider,
    QSpinBox, QSplitter, QStatusBar, QTabWidget,
    QTextEdit, QVBoxLayout, QWidget)

class Ui_TextureAtlasToolboxApp(object):
    def setupUi(self, TextureAtlasToolboxApp):
        if not TextureAtlasToolboxApp.objectName():
            TextureAtlasToolboxApp.setObjectName(u"TextureAtlasToolboxApp")
        TextureAtlasToolboxApp.resize(908, 783)
        TextureAtlasToolboxApp.setUnifiedTitleAndToolBarOnMac(True)
        self.select_directory = QAction(TextureAtlasToolboxApp)
        self.select_directory.setObjectName(u"select_directory")
        self.select_files = QAction(TextureAtlasToolboxApp)
        self.select_files.setObjectName(u"select_files")
        self.clear_export_list = QAction(TextureAtlasToolboxApp)
        self.clear_export_list.setObjectName(u"clear_export_list")
        self.fnf_import_settings = QAction(TextureAtlasToolboxApp)
        self.fnf_import_settings.setObjectName(u"fnf_import_settings")
        self.preferences = QAction(TextureAtlasToolboxApp)
        self.preferences.setObjectName(u"preferences")
        self.help_manual = QAction(TextureAtlasToolboxApp)
        self.help_manual.setObjectName(u"help_manual")
        self.help_fnf = QAction(TextureAtlasToolboxApp)
        self.help_fnf.setObjectName(u"help_fnf")
        self.show_contributors = QAction(TextureAtlasToolboxApp)
        self.show_contributors.setObjectName(u"show_contributors")
        self.centralwidget = QWidget(TextureAtlasToolboxApp)
        self.centralwidget.setObjectName(u"centralwidget")
        self.tools_tab = QTabWidget(self.centralwidget)
        self.tools_tab.setObjectName(u"tools_tab")
        self.tools_tab.setGeometry(QRect(0, 0, 901, 721))
        self.tools_tab.setTabPosition(QTabWidget.TabPosition.North)
        self.tools_tab.setElideMode(Qt.TextElideMode.ElideLeft)
        self.tools_tab.setDocumentMode(False)
        self.tool_extract = QWidget()
        self.tool_extract.setObjectName(u"tool_extract")
        self.listbox_png = QListView(self.tool_extract)
        self.listbox_png.setObjectName(u"listbox_png")
        self.listbox_png.setGeometry(QRect(5, 10, 200, 621))
        self.listbox_png.setAlternatingRowColors(False)
        self.listbox_png.setProperty(u"isWrapping", False)
        self.listbox_data = QListView(self.tool_extract)
        self.listbox_data.setObjectName(u"listbox_data")
        self.listbox_data.setGeometry(QRect(210, 10, 200, 621))
        self.input_button = QPushButton(self.tool_extract)
        self.input_button.setObjectName(u"input_button")
        self.input_button.setGeometry(QRect(570, 10, 171, 24))
        self.output_button = QPushButton(self.tool_extract)
        self.output_button.setObjectName(u"output_button")
        self.output_button.setGeometry(QRect(570, 60, 171, 24))
        self.input_dir_label = QLabel(self.tool_extract)
        self.input_dir_label.setObjectName(u"input_dir_label")
        self.input_dir_label.setGeometry(QRect(430, 30, 451, 21))
        self.input_dir_label.setFrameShape(QFrame.Shape.NoFrame)
        self.input_dir_label.setFrameShadow(QFrame.Shadow.Plain)
        self.input_dir_label.setTextFormat(Qt.TextFormat.PlainText)
        self.input_dir_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.output_dir_label = QLabel(self.tool_extract)
        self.output_dir_label.setObjectName(u"output_dir_label")
        self.output_dir_label.setGeometry(QRect(430, 80, 451, 21))
        self.output_dir_label.setFrameShape(QFrame.Shape.NoFrame)
        self.output_dir_label.setFrameShadow(QFrame.Shadow.Plain)
        self.output_dir_label.setTextFormat(Qt.TextFormat.PlainText)
        self.output_dir_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.animation_export_group = QGroupBox(self.tool_extract)
        self.animation_export_group.setObjectName(u"animation_export_group")
        self.animation_export_group.setGeometry(QRect(458, 110, 191, 331))
        self.animation_export_group.setLayoutDirection(Qt.LayoutDirection.LeftToRight)
        self.animation_export_group.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.animation_export_group.setFlat(False)
        self.animation_export_group.setCheckable(True)
        self.animation_export_group.setChecked(False)
        self.animation_format_combobox = QComboBox(self.animation_export_group)
        self.animation_format_combobox.addItem("")
        self.animation_format_combobox.addItem("")
        self.animation_format_combobox.addItem("")
        self.animation_format_combobox.addItem("")
        self.animation_format_combobox.setObjectName(u"animation_format_combobox")
        self.animation_format_combobox.setGeometry(QRect(10, 50, 171, 24))
        self.animation_format_combobox.setEditable(False)
        self.animation_format_combobox.setMaxVisibleItems(5)
        self.animation_format_combobox.setSizeAdjustPolicy(QComboBox.SizeAdjustPolicy.AdjustToContentsOnFirstShow)
        self.animation_format_combobox.setFrame(True)
        self.animation_format_combobox.setModelColumn(0)
        self.animation_format_label = QLabel(self.animation_export_group)
        self.animation_format_label.setObjectName(u"animation_format_label")
        self.animation_format_label.setGeometry(QRect(40, 30, 111, 16))
        self.animation_format_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.animation_format_label.setIndent(0)
        self.frame_rate_entry = QSpinBox(self.animation_export_group)
        self.frame_rate_entry.setObjectName(u"frame_rate_entry")
        self.frame_rate_entry.setGeometry(QRect(10, 100, 171, 24))
        self.frame_rate_entry.setCorrectionMode(QAbstractSpinBox.CorrectionMode.CorrectToNearestValue)
        self.frame_rate_entry.setProperty(u"showGroupSeparator", False)
        self.frame_rate_entry.setMinimum(1)
        self.frame_rate_entry.setMaximum(1000)
        self.frame_rate_entry.setValue(24)
        self.loop_delay_entry = QSpinBox(self.animation_export_group)
        self.loop_delay_entry.setObjectName(u"loop_delay_entry")
        self.loop_delay_entry.setGeometry(QRect(10, 150, 171, 24))
        self.loop_delay_entry.setAccelerated(True)
        self.loop_delay_entry.setCorrectionMode(QAbstractSpinBox.CorrectionMode.CorrectToNearestValue)
        self.loop_delay_entry.setMaximum(10000)
        self.loop_delay_entry.setValue(250)
        self.loop_delay_entry.setDisplayIntegerBase(10)
        self.min_period_entry = QSpinBox(self.animation_export_group)
        self.min_period_entry.setObjectName(u"min_period_entry")
        self.min_period_entry.setGeometry(QRect(10, 200, 171, 24))
        self.min_period_entry.setAccelerated(True)
        self.min_period_entry.setCorrectionMode(QAbstractSpinBox.CorrectionMode.CorrectToNearestValue)
        self.min_period_entry.setMaximum(10000)
        self.frame_rate_label = QLabel(self.animation_export_group)
        self.frame_rate_label.setObjectName(u"frame_rate_label")
        self.frame_rate_label.setGeometry(QRect(40, 80, 111, 16))
        self.frame_rate_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.loop_delay_label = QLabel(self.animation_export_group)
        self.loop_delay_label.setObjectName(u"loop_delay_label")
        self.loop_delay_label.setGeometry(QRect(40, 130, 111, 16))
        self.loop_delay_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.min_period_label = QLabel(self.animation_export_group)
        self.min_period_label.setObjectName(u"min_period_label")
        self.min_period_label.setGeometry(QRect(40, 180, 111, 16))
        self.min_period_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.scale_label = QLabel(self.animation_export_group)
        self.scale_label.setObjectName(u"scale_label")
        self.scale_label.setGeometry(QRect(40, 230, 111, 16))
        self.scale_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.threshold_label = QLabel(self.animation_export_group)
        self.threshold_label.setObjectName(u"threshold_label")
        self.threshold_label.setGeometry(QRect(40, 280, 111, 16))
        self.threshold_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.threshold_entry = QSpinBox(self.animation_export_group)
        self.threshold_entry.setObjectName(u"threshold_entry")
        self.threshold_entry.setGeometry(QRect(10, 300, 171, 24))
        self.threshold_entry.setAccelerated(True)
        self.threshold_entry.setCorrectionMode(QAbstractSpinBox.CorrectionMode.CorrectToNearestValue)
        self.threshold_entry.setMinimum(0)
        self.threshold_entry.setMaximum(100)
        self.threshold_entry.setValue(50)
        self.scale_entry = QDoubleSpinBox(self.animation_export_group)
        self.scale_entry.setObjectName(u"scale_entry")
        self.scale_entry.setGeometry(QRect(10, 250, 171, 24))
        self.scale_entry.setAccelerated(True)
        self.scale_entry.setCorrectionMode(QAbstractSpinBox.CorrectionMode.CorrectToNearestValue)
        self.scale_entry.setDecimals(2)
        self.scale_entry.setMinimum(0.010000000000000)
        self.scale_entry.setMaximum(100.000000000000000)
        self.scale_entry.setSingleStep(0.010000000000000)
        self.scale_entry.setValue(1.000000000000000)
        self.frame_export_group = QGroupBox(self.tool_extract)
        self.frame_export_group.setObjectName(u"frame_export_group")
        self.frame_export_group.setGeometry(QRect(658, 110, 191, 331))
        self.frame_export_group.setLayoutDirection(Qt.LayoutDirection.LeftToRight)
        self.frame_export_group.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.frame_export_group.setFlat(False)
        self.frame_export_group.setCheckable(True)
        self.frame_export_group.setChecked(False)
        self.frame_format_combobox = QComboBox(self.frame_export_group)
        self.frame_format_combobox.addItem("")
        self.frame_format_combobox.addItem("")
        self.frame_format_combobox.addItem("")
        self.frame_format_combobox.addItem("")
        self.frame_format_combobox.addItem("")
        self.frame_format_combobox.addItem("")
        self.frame_format_combobox.addItem("")
        self.frame_format_combobox.setObjectName(u"frame_format_combobox")
        self.frame_format_combobox.setGeometry(QRect(10, 50, 171, 24))
        self.frame_format_combobox.setEditable(False)
        self.frame_format_combobox.setMaxVisibleItems(10)
        self.frame_format_combobox.setSizeAdjustPolicy(QComboBox.SizeAdjustPolicy.AdjustToContentsOnFirstShow)
        self.frame_format_combobox.setFrame(True)
        self.frame_format_combobox.setModelColumn(0)
        self.frame_format_label = QLabel(self.frame_export_group)
        self.frame_format_label.setObjectName(u"frame_format_label")
        self.frame_format_label.setGeometry(QRect(40, 30, 111, 16))
        self.frame_format_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.frame_format_label.setIndent(0)
        self.frame_scale_label = QLabel(self.frame_export_group)
        self.frame_scale_label.setObjectName(u"frame_scale_label")
        self.frame_scale_label.setGeometry(QRect(40, 130, 111, 16))
        self.frame_scale_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.frame_scale_entry = QDoubleSpinBox(self.frame_export_group)
        self.frame_scale_entry.setObjectName(u"frame_scale_entry")
        self.frame_scale_entry.setGeometry(QRect(10, 150, 171, 24))
        self.frame_scale_entry.setAccelerated(True)
        self.frame_scale_entry.setCorrectionMode(QAbstractSpinBox.CorrectionMode.CorrectToNearestValue)
        self.frame_scale_entry.setDecimals(2)
        self.frame_scale_entry.setMinimum(0.010000000000000)
        self.frame_scale_entry.setMaximum(100.000000000000000)
        self.frame_scale_entry.setSingleStep(0.010000000000000)
        self.frame_scale_entry.setValue(1.000000000000000)
        self.frame_selection_combobox = QComboBox(self.frame_export_group)
        self.frame_selection_combobox.addItem("")
        self.frame_selection_combobox.addItem("")
        self.frame_selection_combobox.addItem("")
        self.frame_selection_combobox.addItem("")
        self.frame_selection_combobox.addItem("")
        self.frame_selection_combobox.addItem("")
        self.frame_selection_combobox.setObjectName(u"frame_selection_combobox")
        self.frame_selection_combobox.setGeometry(QRect(10, 100, 171, 24))
        self.frame_selection_label = QLabel(self.frame_export_group)
        self.frame_selection_label.setObjectName(u"frame_selection_label")
        self.frame_selection_label.setGeometry(QRect(40, 80, 111, 16))
        self.frame_selection_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.compression_settings_button = QPushButton(self.frame_export_group)
        self.compression_settings_button.setObjectName(u"compression_settings_button")
        self.compression_settings_button.setGeometry(QRect(10, 200, 171, 24))
        self.cropping_method_label = QLabel(self.tool_extract)
        self.cropping_method_label.setObjectName(u"cropping_method_label")
        self.cropping_method_label.setGeometry(QRect(500, 450, 111, 16))
        self.cropping_method_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.cropping_method_label.setIndent(0)
        self.cropping_method_combobox = QComboBox(self.tool_extract)
        self.cropping_method_combobox.addItem("")
        self.cropping_method_combobox.addItem("")
        self.cropping_method_combobox.addItem("")
        self.cropping_method_combobox.setObjectName(u"cropping_method_combobox")
        self.cropping_method_combobox.setGeometry(QRect(490, 470, 131, 24))
        self.filename_prefix_label = QLabel(self.tool_extract)
        self.filename_prefix_label.setObjectName(u"filename_prefix_label")
        self.filename_prefix_label.setGeometry(QRect(528, 510, 111, 16))
        self.filename_prefix_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.filename_prefix_label.setIndent(0)
        self.filename_prefix_entry = QLineEdit(self.tool_extract)
        self.filename_prefix_entry.setObjectName(u"filename_prefix_entry")
        self.filename_prefix_entry.setGeometry(QRect(520, 530, 131, 24))
        self.filename_suffix_label = QLabel(self.tool_extract)
        self.filename_suffix_label.setObjectName(u"filename_suffix_label")
        self.filename_suffix_label.setGeometry(QRect(666, 510, 111, 16))
        self.filename_suffix_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.filename_suffix_label.setIndent(0)
        self.filename_suffix_entry = QLineEdit(self.tool_extract)
        self.filename_suffix_entry.setObjectName(u"filename_suffix_entry")
        self.filename_suffix_entry.setGeometry(QRect(658, 530, 131, 24))
        self.filename_format_combobox = QComboBox(self.tool_extract)
        self.filename_format_combobox.addItem("")
        self.filename_format_combobox.addItem("")
        self.filename_format_combobox.addItem("")
        self.filename_format_combobox.setObjectName(u"filename_format_combobox")
        self.filename_format_combobox.setGeometry(QRect(690, 470, 131, 24))
        self.filename_format_label = QLabel(self.tool_extract)
        self.filename_format_label.setObjectName(u"filename_format_label")
        self.filename_format_label.setGeometry(QRect(700, 450, 111, 16))
        self.filename_format_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.filename_format_label.setIndent(0)
        self.advanced_filename_button = QPushButton(self.tool_extract)
        self.advanced_filename_button.setObjectName(u"advanced_filename_button")
        self.advanced_filename_button.setGeometry(QRect(560, 560, 191, 24))
        self.start_process_button = QPushButton(self.tool_extract)
        self.start_process_button.setObjectName(u"start_process_button")
        self.start_process_button.setGeometry(QRect(740, 635, 141, 32))
        self.start_process_button.setChecked(False)
        self.show_override_settings_button = QPushButton(self.tool_extract)
        self.show_override_settings_button.setObjectName(u"show_override_settings_button")
        self.show_override_settings_button.setGeometry(QRect(440, 635, 141, 32))
        self.override_spritesheet_settings_button = QPushButton(self.tool_extract)
        self.override_spritesheet_settings_button.setObjectName(u"override_spritesheet_settings_button")
        self.override_spritesheet_settings_button.setGeometry(QRect(5, 635, 200, 32))
        self.reset_button = QPushButton(self.tool_extract)
        self.reset_button.setObjectName(u"reset_button")
        self.reset_button.setGeometry(QRect(590, 635, 141, 32))
        self.override_animation_settings_button = QPushButton(self.tool_extract)
        self.override_animation_settings_button.setObjectName(u"override_animation_settings_button")
        self.override_animation_settings_button.setGeometry(QRect(210, 635, 200, 32))
        self.tools_tab.addTab(self.tool_extract, "")
        self.tool_generate = QWidget()
        self.tool_generate.setObjectName(u"tool_generate")
        self.main_layout = QVBoxLayout(self.tool_generate)
        self.main_layout.setSpacing(10)
        self.main_layout.setObjectName(u"main_layout")
        self.main_layout.setContentsMargins(10, 10, 10, 10)
        self.main_splitter = QSplitter(self.tool_generate)
        self.main_splitter.setObjectName(u"main_splitter")
        self.main_splitter.setOrientation(Qt.Orientation.Horizontal)
        self.file_panel = QFrame(self.main_splitter)
        self.file_panel.setObjectName(u"file_panel")
        self.file_panel.setFrameShape(QFrame.Shape.StyledPanel)
        self.file_panel.setFrameShadow(QFrame.Shadow.Raised)
        self.file_panel_layout = QVBoxLayout(self.file_panel)
        self.file_panel_layout.setSpacing(12)
        self.file_panel_layout.setObjectName(u"file_panel_layout")
        self.file_panel_layout.setContentsMargins(12, 12, 12, 12)
        self.input_group = QGroupBox(self.file_panel)
        self.input_group.setObjectName(u"input_group")
        self.input_group.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.input_group.setFlat(True)
        self.input_layout = QVBoxLayout(self.input_group)
        self.input_layout.setSpacing(8)
        self.input_layout.setObjectName(u"input_layout")
        self.input_layout.setContentsMargins(10, 15, 10, 10)
        self.input_buttons_layout = QHBoxLayout()
        self.input_buttons_layout.setSpacing(2)
        self.input_buttons_layout.setObjectName(u"input_buttons_layout")
        self.add_directory_button = QPushButton(self.input_group)
        self.add_directory_button.setObjectName(u"add_directory_button")
        self.add_directory_button.setMinimumSize(QSize(0, 16))

        self.input_buttons_layout.addWidget(self.add_directory_button)

        self.add_files_button = QPushButton(self.input_group)
        self.add_files_button.setObjectName(u"add_files_button")
        self.add_files_button.setMinimumSize(QSize(0, 16))
        self.add_files_button.setFlat(False)

        self.input_buttons_layout.addWidget(self.add_files_button)

        self.add_existing_atlas_button = QPushButton(self.input_group)
        self.add_existing_atlas_button.setObjectName(u"add_existing_atlas_button")
        self.add_existing_atlas_button.setMinimumSize(QSize(0, 16))
        self.add_existing_atlas_button.setFlat(False)

        self.input_buttons_layout.addWidget(self.add_existing_atlas_button)

        self.clear_frames_button = QPushButton(self.input_group)
        self.clear_frames_button.setObjectName(u"clear_frames_button")
        self.clear_frames_button.setMinimumSize(QSize(0, 16))

        self.input_buttons_layout.addWidget(self.clear_frames_button)

        self.add_animation_button = QPushButton(self.input_group)
        self.add_animation_button.setObjectName(u"add_animation_button")
        self.add_animation_button.setMinimumSize(QSize(0, 16))

        self.input_buttons_layout.addWidget(self.add_animation_button)


        self.input_layout.addLayout(self.input_buttons_layout)

        self.animation_tree_placeholder = QWidget(self.input_group)
        self.animation_tree_placeholder.setObjectName(u"animation_tree_placeholder")
        self.animation_tree_placeholder.setMinimumSize(QSize(0, 200))

        self.input_layout.addWidget(self.animation_tree_placeholder)

        self.frame_info_label = QLabel(self.input_group)
        self.frame_info_label.setObjectName(u"frame_info_label")

        self.input_layout.addWidget(self.frame_info_label)


        self.file_panel_layout.addWidget(self.input_group)

        self.main_splitter.addWidget(self.file_panel)
        self.settings_panel = QFrame(self.main_splitter)
        self.settings_panel.setObjectName(u"settings_panel")
        self.settings_panel.setToolTipDuration(1)
        self.settings_panel.setFrameShape(QFrame.Shape.StyledPanel)
        self.settings_panel.setFrameShadow(QFrame.Shadow.Raised)
        self.settings_panel_layout = QVBoxLayout(self.settings_panel)
        self.settings_panel_layout.setSpacing(16)
        self.settings_panel_layout.setObjectName(u"settings_panel_layout")
        self.settings_panel_layout.setContentsMargins(16, 16, 16, 16)
        self.atlas_group = QGroupBox(self.settings_panel)
        self.atlas_group.setObjectName(u"atlas_group")
        self.atlas_group.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.atlas_group.setFlat(True)
        self.atlas_layout = QGridLayout(self.atlas_group)
        self.atlas_layout.setSpacing(0)
        self.atlas_layout.setObjectName(u"atlas_layout")
        self.atlas_layout.setSizeConstraint(QLayout.SizeConstraint.SetNoConstraint)
        self.atlas_layout.setContentsMargins(2, 2, 2, 2)
        self.atlas_size_method_combobox = QComboBox(self.atlas_group)
        self.atlas_size_method_combobox.addItem("")
        self.atlas_size_method_combobox.addItem("")
        self.atlas_size_method_combobox.addItem("")
        self.atlas_size_method_combobox.setObjectName(u"atlas_size_method_combobox")
        self.atlas_size_method_combobox.setEditable(True)

        self.atlas_layout.addWidget(self.atlas_size_method_combobox, 21, 2, 1, 1)

        self.packer_method_combobox = QComboBox(self.atlas_group)
        self.packer_method_combobox.addItem("")
        self.packer_method_combobox.addItem("")
        self.packer_method_combobox.setObjectName(u"packer_method_combobox")

        self.atlas_layout.addWidget(self.packer_method_combobox, 5, 2, 1, 1)

        self.atlas_type_label = QLabel(self.atlas_group)
        self.atlas_type_label.setObjectName(u"atlas_type_label")

        self.atlas_layout.addWidget(self.atlas_type_label, 3, 0, 1, 1)

        self.image_format_combo = QComboBox(self.atlas_group)
        self.image_format_combo.addItem("")
        self.image_format_combo.addItem("")
        self.image_format_combo.setObjectName(u"image_format_combo")

        self.atlas_layout.addWidget(self.image_format_combo, 6, 2, 1, 1)

        self.atlas_size_spinbox_1 = QSpinBox(self.atlas_group)
        self.atlas_size_spinbox_1.setObjectName(u"atlas_size_spinbox_1")
        self.atlas_size_spinbox_1.setMinimum(32)
        self.atlas_size_spinbox_1.setMaximum(65536)
        self.atlas_size_spinbox_1.setValue(512)

        self.atlas_layout.addWidget(self.atlas_size_spinbox_1, 23, 2, 1, 1)

        self.atlas_size_method_label = QLabel(self.atlas_group)
        self.atlas_size_method_label.setObjectName(u"atlas_size_method_label")

        self.atlas_layout.addWidget(self.atlas_size_method_label, 21, 0, 1, 1)

        self.power_of_2_check = QCheckBox(self.atlas_group)
        self.power_of_2_check.setObjectName(u"power_of_2_check")
        self.power_of_2_check.setToolTipDuration(1)
        self.power_of_2_check.setChecked(False)

        self.atlas_layout.addWidget(self.power_of_2_check, 26, 0, 1, 1)

        self.atlas_size_label_1 = QLabel(self.atlas_group)
        self.atlas_size_label_1.setObjectName(u"atlas_size_label_1")

        self.atlas_layout.addWidget(self.atlas_size_label_1, 23, 0, 1, 1)

        self.atlas_type_combo = QComboBox(self.atlas_group)
        self.atlas_type_combo.addItem("")
        self.atlas_type_combo.setObjectName(u"atlas_type_combo")

        self.atlas_layout.addWidget(self.atlas_type_combo, 3, 2, 1, 1)

        self.speed_optimization_slider = QSlider(self.atlas_group)
        self.speed_optimization_slider.setObjectName(u"speed_optimization_slider")
        self.speed_optimization_slider.setMinimum(0)
        self.speed_optimization_slider.setMaximum(10)
        self.speed_optimization_slider.setValue(5)
        self.speed_optimization_slider.setOrientation(Qt.Orientation.Horizontal)
        self.speed_optimization_slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        self.speed_optimization_slider.setTickInterval(1)

        self.atlas_layout.addWidget(self.speed_optimization_slider, 12, 2, 1, 1)

        self.speed_optimization_label = QLabel(self.atlas_group)
        self.speed_optimization_label.setObjectName(u"speed_optimization_label")

        self.atlas_layout.addWidget(self.speed_optimization_label, 12, 0, 1, 1)

        self.atlas_size_spinbox_2 = QSpinBox(self.atlas_group)
        self.atlas_size_spinbox_2.setObjectName(u"atlas_size_spinbox_2")
        self.atlas_size_spinbox_2.setMinimum(128)
        self.atlas_size_spinbox_2.setMaximum(65536)
        self.atlas_size_spinbox_2.setValue(8192)

        self.atlas_layout.addWidget(self.atlas_size_spinbox_2, 24, 2, 1, 1)

        self.speed_optimization_value_label = QLabel(self.atlas_group)
        self.speed_optimization_value_label.setObjectName(u"speed_optimization_value_label")

        self.atlas_layout.addWidget(self.speed_optimization_value_label, 20, 0, 1, 1)

        self.packer_method_label = QLabel(self.atlas_group)
        self.packer_method_label.setObjectName(u"packer_method_label")

        self.atlas_layout.addWidget(self.packer_method_label, 5, 0, 1, 1)

        self.image_format_label = QLabel(self.atlas_group)
        self.image_format_label.setObjectName(u"image_format_label")

        self.atlas_layout.addWidget(self.image_format_label, 6, 0, 1, 1)

        self.atlas_size_label_2 = QLabel(self.atlas_group)
        self.atlas_size_label_2.setObjectName(u"atlas_size_label_2")

        self.atlas_layout.addWidget(self.atlas_size_label_2, 24, 0, 1, 1)

        self.padding_label = QLabel(self.atlas_group)
        self.padding_label.setObjectName(u"padding_label")

        self.atlas_layout.addWidget(self.padding_label, 25, 0, 1, 1)

        self.padding_spin = QSpinBox(self.atlas_group)
        self.padding_spin.setObjectName(u"padding_spin")
#if QT_CONFIG(statustip)
        self.padding_spin.setStatusTip(u"Adds some extra whitespace between textures or sprites to ensure they won't overlap")
#endif // QT_CONFIG(statustip)
        self.padding_spin.setFrame(True)
        self.padding_spin.setAlignment(Qt.AlignmentFlag.AlignLeading|Qt.AlignmentFlag.AlignLeft|Qt.AlignmentFlag.AlignVCenter)
        self.padding_spin.setMaximum(64)
        self.padding_spin.setValue(2)

        self.atlas_layout.addWidget(self.padding_spin, 25, 2, 1, 1)


        self.settings_panel_layout.addWidget(self.atlas_group)

        self.main_splitter.addWidget(self.settings_panel)

        self.main_layout.addWidget(self.main_splitter)

        self.generate_button = QPushButton(self.tool_generate)
        self.generate_button.setObjectName(u"generate_button")
        self.generate_button.setEnabled(False)
        self.generate_button.setMinimumSize(QSize(0, 45))

        self.main_layout.addWidget(self.generate_button)

        self.progress_panel = QFrame(self.tool_generate)
        self.progress_panel.setObjectName(u"progress_panel")
        self.progress_panel.setMaximumSize(QSize(16777215, 150))
        self.progress_panel.setFrameShape(QFrame.Shape.StyledPanel)
        self.progress_panel.setFrameShadow(QFrame.Shadow.Raised)
        self.progress_layout = QVBoxLayout(self.progress_panel)
        self.progress_layout.setSpacing(6)
        self.progress_layout.setObjectName(u"progress_layout")
        self.progress_layout.setContentsMargins(10, 10, 10, 10)
        self.progress_bar = QProgressBar(self.progress_panel)
        self.progress_bar.setObjectName(u"progress_bar")
        self.progress_bar.setVisible(False)
        self.progress_bar.setValue(24)

        self.progress_layout.addWidget(self.progress_bar)

        self.status_label = QLabel(self.progress_panel)
        self.status_label.setObjectName(u"status_label")

        self.progress_layout.addWidget(self.status_label)

        self.log_text = QTextEdit(self.progress_panel)
        self.log_text.setObjectName(u"log_text")
        self.log_text.setMaximumSize(QSize(16777215, 80))

        self.progress_layout.addWidget(self.log_text)


        self.main_layout.addWidget(self.progress_panel)

        self.tools_tab.addTab(self.tool_generate, "")
        TextureAtlasToolboxApp.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(TextureAtlasToolboxApp)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 908, 33))
        self.file_menu = QMenu(self.menubar)
        self.file_menu.setObjectName(u"file_menu")
        self.import_menu = QMenu(self.menubar)
        self.import_menu.setObjectName(u"import_menu")
        self.help_menu = QMenu(self.menubar)
        self.help_menu.setObjectName(u"help_menu")
        self.contributors_menu = QMenu(self.menubar)
        self.contributors_menu.setObjectName(u"contributors_menu")
        self.advanced_menu = QMenu(self.menubar)
        self.advanced_menu.setObjectName(u"advanced_menu")
        self.options_menu = QMenu(self.menubar)
        self.options_menu.setObjectName(u"options_menu")
        TextureAtlasToolboxApp.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(TextureAtlasToolboxApp)
        self.statusbar.setObjectName(u"statusbar")
        TextureAtlasToolboxApp.setStatusBar(self.statusbar)

        self.menubar.addAction(self.file_menu.menuAction())
        self.menubar.addAction(self.import_menu.menuAction())
        self.menubar.addAction(self.help_menu.menuAction())
        self.menubar.addAction(self.contributors_menu.menuAction())
        self.menubar.addAction(self.advanced_menu.menuAction())
        self.menubar.addAction(self.options_menu.menuAction())
        self.file_menu.addAction(self.select_directory)
        self.file_menu.addAction(self.select_files)
        self.file_menu.addAction(self.clear_export_list)
        self.import_menu.addAction(self.fnf_import_settings)
        self.help_menu.addAction(self.help_manual)
        self.help_menu.addAction(self.help_fnf)
        self.contributors_menu.addAction(self.show_contributors)
        self.options_menu.addAction(self.preferences)

        self.retranslateUi(TextureAtlasToolboxApp)

        self.tools_tab.setCurrentIndex(1)
        self.animation_format_combobox.setCurrentIndex(0)
        self.frame_format_combobox.setCurrentIndex(3)
        self.cropping_method_combobox.setCurrentIndex(1)


        QMetaObject.connectSlotsByName(TextureAtlasToolboxApp)
    # setupUi

    def retranslateUi(self, TextureAtlasToolboxApp):
        self.select_directory.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Select directory", None))
        self.select_files.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Select files", None))
        self.clear_export_list.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Clear export list", None))
        self.fnf_import_settings.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"FNF: Import settings from character data file", None))
        self.preferences.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Preferences", None))
        self.help_manual.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"User Manual", None))
        self.help_fnf.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"FNF Guide", None))
        self.show_contributors.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Show Contributors", None))
#if QT_CONFIG(statustip)
        self.tools_tab.setStatusTip("")
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(statustip)
        self.tool_extract.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Extract frames from TextureAtlases. Extraction supports exporting as frames or animations.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(statustip)
        self.listbox_png.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"List of all spritesheets to extract", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(statustip)
        self.listbox_data.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"List of all the animations of the currently selected spritesheet", None))
#endif // QT_CONFIG(statustip)
        self.input_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Select input directory", None))
        self.output_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Select output directory", None))
        self.input_dir_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"No input directory selected", None))
        self.output_dir_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"No output directory selected", None))
#if QT_CONFIG(statustip)
        self.animation_export_group.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Animation export settings", None))
#endif // QT_CONFIG(statustip)
        self.animation_export_group.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Export as animations", None))
        self.animation_format_combobox.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"GIF", None))
        self.animation_format_combobox.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"WebP", None))
        self.animation_format_combobox.setItemText(2, QCoreApplication.translate("TextureAtlasToolboxApp", u"APNG", None))
        self.animation_format_combobox.setItemText(3, QCoreApplication.translate("TextureAtlasToolboxApp", u"Custom FFMPEG", None))

#if QT_CONFIG(statustip)
        self.animation_format_combobox.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Sets the format of animated images", None))
#endif // QT_CONFIG(statustip)
        self.animation_format_combobox.setPlaceholderText("")
        self.animation_format_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Animation format", None))
#if QT_CONFIG(statustip)
        self.frame_rate_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Sets the playback rate of animated images", None))
#endif // QT_CONFIG(statustip)
        self.frame_rate_entry.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" fps", None))
        self.frame_rate_entry.setPrefix("")
#if QT_CONFIG(statustip)
        self.loop_delay_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Time to wait before looping the animation", None))
#endif // QT_CONFIG(statustip)
        self.loop_delay_entry.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" ms", None))
#if QT_CONFIG(statustip)
        self.min_period_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Forces animated images to be played for at least the set amount of time.", None))
#endif // QT_CONFIG(statustip)
        self.min_period_entry.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" ms", None))
        self.frame_rate_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Frame rate", None))
        self.loop_delay_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Loop delay", None))
        self.min_period_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Minimum period", None))
        self.scale_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Scale", None))
        self.threshold_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Alpha threshold", None))
#if QT_CONFIG(statustip)
        self.threshold_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"[GIFs only!] Sets the alpha threshold of GIFs", None))
#endif // QT_CONFIG(statustip)
        self.threshold_entry.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" %", None))
#if QT_CONFIG(statustip)
        self.scale_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Sets the scale of animated images", None))
#endif // QT_CONFIG(statustip)
        self.scale_entry.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" \u00d7", None))
#if QT_CONFIG(statustip)
        self.frame_export_group.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Frame export settings", None))
#endif // QT_CONFIG(statustip)
        self.frame_export_group.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Export as frames", None))
        self.frame_format_combobox.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"AVIF", None))
        self.frame_format_combobox.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"BMP", None))
        self.frame_format_combobox.setItemText(2, QCoreApplication.translate("TextureAtlasToolboxApp", u"DDS", None))
        self.frame_format_combobox.setItemText(3, QCoreApplication.translate("TextureAtlasToolboxApp", u"PNG", None))
        self.frame_format_combobox.setItemText(4, QCoreApplication.translate("TextureAtlasToolboxApp", u"TGA", None))
        self.frame_format_combobox.setItemText(5, QCoreApplication.translate("TextureAtlasToolboxApp", u"TIFF", None))
        self.frame_format_combobox.setItemText(6, QCoreApplication.translate("TextureAtlasToolboxApp", u"WebP", None))

#if QT_CONFIG(statustip)
        self.frame_format_combobox.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Sets the format of frame images", None))
#endif // QT_CONFIG(statustip)
        self.frame_format_combobox.setPlaceholderText("")
        self.frame_format_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Frame format", None))
        self.frame_scale_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Scale", None))
#if QT_CONFIG(statustip)
        self.frame_scale_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Sets the scale of frames images", None))
#endif // QT_CONFIG(statustip)
        self.frame_scale_entry.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" \u00d7", None))
        self.frame_selection_combobox.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"All", None))
        self.frame_selection_combobox.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"No duplicates", None))
        self.frame_selection_combobox.setItemText(2, QCoreApplication.translate("TextureAtlasToolboxApp", u"First", None))
        self.frame_selection_combobox.setItemText(3, QCoreApplication.translate("TextureAtlasToolboxApp", u"Last", None))
        self.frame_selection_combobox.setItemText(4, QCoreApplication.translate("TextureAtlasToolboxApp", u"First, Last", None))
        self.frame_selection_combobox.setItemText(5, QCoreApplication.translate("TextureAtlasToolboxApp", u"Custom", None))

#if QT_CONFIG(statustip)
        self.frame_selection_combobox.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Which frames to export. \"All\" exports all frames, \"No duplicates\" only exports unique frames, \"First, Last\" exports the first and last frame of the animation.", None))
#endif // QT_CONFIG(statustip)
        self.frame_selection_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Frame selection", None))
#if QT_CONFIG(statustip)
        self.compression_settings_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Controls compression settings for frame images", None))
#endif // QT_CONFIG(statustip)
        self.compression_settings_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Compression settings", None))
        self.cropping_method_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Cropping method", None))
        self.cropping_method_combobox.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"None", None))
        self.cropping_method_combobox.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"Animation based", None))
        self.cropping_method_combobox.setItemText(2, QCoreApplication.translate("TextureAtlasToolboxApp", u"Frame based", None))

#if QT_CONFIG(statustip)
        self.cropping_method_combobox.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"How cropping should be done. Note: \"Frame based\" only works on frames, animations will automatically use \"Animation based\" if \"Frame based\" was chosen.", None))
#endif // QT_CONFIG(statustip)
        self.filename_prefix_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Filename prefix", None))
#if QT_CONFIG(statustip)
        self.filename_prefix_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Adds a prefix to the filename", None))
#endif // QT_CONFIG(statustip)
        self.filename_prefix_entry.setText("")
        self.filename_suffix_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Filename suffix", None))
#if QT_CONFIG(statustip)
        self.filename_suffix_entry.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Adds a suffix to the filename", None))
#endif // QT_CONFIG(statustip)
        self.filename_suffix_entry.setText("")
        self.filename_suffix_entry.setPlaceholderText("")
        self.filename_format_combobox.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"Standardized", None))
        self.filename_format_combobox.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"No spaces", None))
        self.filename_format_combobox.setItemText(2, QCoreApplication.translate("TextureAtlasToolboxApp", u"No special characters", None))

#if QT_CONFIG(statustip)
        self.filename_format_combobox.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"How filenames should be formatted. Standardized exports names as \"Spritesheet name - animation name\".", None))
#endif // QT_CONFIG(statustip)
        self.filename_format_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Filename format", None))
#if QT_CONFIG(statustip)
        self.advanced_filename_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Advanced filename options allows using pattern matching to remove certain words or phrases from filenames. Supports \"Regular Expression\".", None))
#endif // QT_CONFIG(statustip)
        self.advanced_filename_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Advanced filename options", None))
#if QT_CONFIG(statustip)
        self.start_process_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Starts extraction process", None))
#endif // QT_CONFIG(statustip)
        self.start_process_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Start process", None))
#if QT_CONFIG(statustip)
        self.show_override_settings_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Opens a window showing all the current override settings.", None))
#endif // QT_CONFIG(statustip)
        self.show_override_settings_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Show override settings", None))
#if QT_CONFIG(statustip)
        self.override_spritesheet_settings_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Overrides the global settings for the selected spritesheet", None))
#endif // QT_CONFIG(statustip)
        self.override_spritesheet_settings_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Override spritesheet settings", None))
#if QT_CONFIG(statustip)
        self.reset_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Resets the filelist and override settings", None))
#endif // QT_CONFIG(statustip)
        self.reset_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Reset", None))
#if QT_CONFIG(statustip)
        self.override_animation_settings_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Overrides the global settings for the selected animation", None))
#endif // QT_CONFIG(statustip)
        self.override_animation_settings_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Override animation settings", None))
        self.tools_tab.setTabText(self.tools_tab.indexOf(self.tool_extract), QCoreApplication.translate("TextureAtlasToolboxApp", u"Extract", None))
        self.input_group.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Input", None))
#if QT_CONFIG(tooltip)
        self.add_directory_button.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.add_directory_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Adds all images from the selected directory to the atlas generator", None))
#endif // QT_CONFIG(statustip)
        self.add_directory_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Directory", None))
#if QT_CONFIG(statustip)
        self.add_files_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Adds selected files to the atlas generator", None))
#endif // QT_CONFIG(statustip)
        self.add_files_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Files", None))
#if QT_CONFIG(statustip)
        self.add_existing_atlas_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Adds an existing atlas to be regenerated by the generator", None))
#endif // QT_CONFIG(statustip)
        self.add_existing_atlas_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Atlas", None))
#if QT_CONFIG(statustip)
        self.clear_frames_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Clears all input files", None))
#endif // QT_CONFIG(statustip)
        self.clear_frames_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Clear All", None))
#if QT_CONFIG(statustip)
        self.add_animation_button.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Manually adds a new animation entry for the atlas", None))
#endif // QT_CONFIG(statustip)
        self.add_animation_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"New Animation", None))
        self.frame_info_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"No frames loaded", None))
#if QT_CONFIG(tooltip)
        self.settings_panel.setToolTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"This spritesheet uses 4096\u00d74096 dimensions, which are GPU-optimized. Power-of-two sizes enable faster loading, better compression, and full support for mipmaps and tiling.", None))
#endif // QT_CONFIG(tooltip)
        self.atlas_group.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Atlas Settings", None))
        self.atlas_size_method_combobox.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"Automatic", None))
        self.atlas_size_method_combobox.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"MinMax", None))
        self.atlas_size_method_combobox.setItemText(2, QCoreApplication.translate("TextureAtlasToolboxApp", u"Manual", None))

#if QT_CONFIG(tooltip)
        self.atlas_size_method_combobox.setToolTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"<html><head/><body><p><span style=\" font-weight:700;\">Atlas sizing method:</span><br/>\u2022 <span style=\" font-style:italic;\">Automatic</span>: Detects smallest needed pixel size<br/>\u2022 <span style=\" font-style:italic;\">MinMax</span>: Limits size between min and max resolution<br/>\u2022 <span style=\" font-style:italic;\">Manual</span>: Enter exact resolution manually</p><p>Automatic is recommended.</p></body></html>", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.atlas_size_method_combobox.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Choose how the atlas size is determined", None))
#endif // QT_CONFIG(statustip)
        self.packer_method_combobox.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"OrderedBlocks", None))
        self.packer_method_combobox.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"GrowingBin", None))

        self.atlas_type_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Atlas type", None))
        self.image_format_combo.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"PNG", None))
        self.image_format_combo.setItemText(1, QCoreApplication.translate("TextureAtlasToolboxApp", u"JPEG", None))

#if QT_CONFIG(statustip)
        self.atlas_size_spinbox_1.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.atlas_size_spinbox_1.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" px", None))
#if QT_CONFIG(tooltip)
        self.atlas_size_method_label.setToolTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"<html><head/><body><p><span style=\" font-weight:700;\">Atlas sizing method:</span><br/>\u2022 <span style=\" font-style:italic;\">Automatic</span>: Detects smallest needed pixel size<br/>\u2022 <span style=\" font-style:italic;\">MinMax</span>: Limits size between min and max resolution<br/>\u2022 <span style=\" font-style:italic;\">Manual</span>: Enter exact resolution manually</p><p>Automatic is recommended.</p></body></html>", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.atlas_size_method_label.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Choose how the atlas size is determined", None))
#endif // QT_CONFIG(statustip)
        self.atlas_size_method_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Atlas size method", None))
#if QT_CONFIG(tooltip)
        self.power_of_2_check.setToolTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"<html><head/><body><p>Power-of-two sizes <span style=\" font-style:italic;\">may</span> enable faster loading, better compression, and full support for mipmaps and tiling.</p><p><br/></p><p><span style=\" font-weight:700; font-style:italic;\">Older GPUs and WebGL 1</span><span style=\" font-style:italic;\"> often require Po2 textures for full compatibility or better performance<br/></span><span style=\" font-weight:700; font-style:italic;\">Modern GPUs and WebGL 2+</span><span style=\" font-style:italic;\"> fully support non-Po2 textures without penalty.</span></p><p><br/><span style=\" font-weight:700;\">Use Po2 textures when</span></p><p><span style=\" font-style:italic;\">Memory usage is important or you're not using </span><span style=\" font-weight:700; font-style:italic;\">mipmapping</span><span style=\" font-style:italic;\">, </span><span style=\" font-weight:700; font-style:italic;\">texture wrapping</span><span style=\" font-style:italic;\">, or </span><span style=\" font-weight:700; font-style:italic"
                        ";\">GPU compression.</span></p><p><br/></p><p><span style=\" font-weight:700;\">Use Po2 textures when</span></p><p><span style=\" font-style:italic;\">Targeting older devices or you're using </span><span style=\" font-weight:700; font-style:italic;\">mipmapping</span><span style=\" font-style:italic;\">, </span><span style=\" font-weight:700; font-style:italic;\">texture wrapping</span><span style=\" font-style:italic;\">, or </span><span style=\" font-weight:700; font-style:italic;\">GPU compression.</span></p></body></html>", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.power_of_2_check.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Pads the atlas to the nearest power-of-two size (e.g., 512, 1024, 4096). Improves compatibility with older hardware.", None))
#endif // QT_CONFIG(statustip)
        self.power_of_2_check.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Use \"Power of 2\" sizes", None))
#if QT_CONFIG(statustip)
        self.atlas_size_label_1.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.atlas_size_label_1.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Min atlas size", None))
        self.atlas_type_combo.setItemText(0, QCoreApplication.translate("TextureAtlasToolboxApp", u"Sparrow", None))

        self.speed_optimization_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Speed vs Optimization:", None))
#if QT_CONFIG(statustip)
        self.atlas_size_spinbox_2.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.atlas_size_spinbox_2.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" px", None))
        self.speed_optimization_value_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Level: 5 (Balanced)", None))
        self.packer_method_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Packer method", None))
        self.image_format_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Image format", None))
#if QT_CONFIG(statustip)
        self.atlas_size_label_2.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.atlas_size_label_2.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Max atlas size", None))
#if QT_CONFIG(statustip)
        self.padding_label.setStatusTip(QCoreApplication.translate("TextureAtlasToolboxApp", u"Adds some extra whitespace between textures or sprites to ensure they won't overlap", None))
#endif // QT_CONFIG(statustip)
        self.padding_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Padding:", None))
        self.padding_spin.setSuffix(QCoreApplication.translate("TextureAtlasToolboxApp", u" px", None))
        self.generate_button.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Generate Atlas", None))
        self.status_label.setText(QCoreApplication.translate("TextureAtlasToolboxApp", u"Ready", None))
        self.log_text.setHtml(QCoreApplication.translate("TextureAtlasToolboxApp", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:'Segoe UI'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Atlas generation log will appear here...</p></body></html>", None))
        self.tools_tab.setTabText(self.tools_tab.indexOf(self.tool_generate), QCoreApplication.translate("TextureAtlasToolboxApp", u"Generate", None))
        self.file_menu.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"File", None))
        self.import_menu.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Import", None))
        self.help_menu.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Help", None))
        self.contributors_menu.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Contributors", None))
        self.advanced_menu.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Advanced", None))
        self.options_menu.setTitle(QCoreApplication.translate("TextureAtlasToolboxApp", u"Options", None))
        pass
    # retranslateUi

